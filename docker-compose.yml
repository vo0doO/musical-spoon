services:
  reverse-proxy:
    container_name: reverse-proxy
    image: traefik:v3.3
    restart: always
    command:
      - --accesslog=true
      - --log.level=DEBUG
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entryPoints.web.address=:80
    ports:
      - 80:80
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - musical-spoon

  auth:
    container_name: auth
    image: auth
    restart: always
    build:
      context: apps/auth
    depends_on:
      auth_db:
        condition: service_started
    working_dir: /app
    environment:
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"
    networks:
      - musical-spoon
      - auth
    labels:
      - traefik.enable=true
      - traefik.http.routers.auth.rule=Host(`auth.localhost`)
      - traefik.http.routers.auth.entryPoints=web
      - traefik.http.middlewares.forward-auth.forwardauth.address=http://auth/auth
      - traefik.http.middlewares.forward-auth.forwardauth.authResponseHeaders=X-User-Role
      - traefik.docker.network=musical-spoon

  auth_db:
    image: mongo
    container_name: auth_db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - auth_db:/data/db
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"
    networks:
      - auth

  events:
    container_name: events
    image: events
    restart: always
    build:
      context: apps/events
    depends_on:
      events_db:
        condition: service_started
    working_dir: /app
    environment:
      - EVENTS_POSTGRES_USER=${EVENTS_POSTGRES_USER}
      - EVENTS_POSTGRES_PASSWORD=${EVENTS_POSTGRES_PASSWORD}
      - EVENTS_POSTGRES_DB=${EVENTS_POSTGRES_DB}
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"
    networks:
      - musical-spoon
      - events
    labels:
      - traefik.enable=true
      - traefik.http.routers.events.rule=Host(`events.localhost`)
      - traefik.http.routers.events.entryPoints=web
      - traefik.http.routers.events.middlewares=forward-auth
      - traefik.docker.network=musical-spoon

  events_db:
    image: postgres:latest
    container_name: events_db
    restart: always
    environment:
      - POSTGRES_USER=${EVENTS_POSTGRES_USER}
      - POSTGRES_PASSWORD=${EVENTS_POSTGRES_PASSWORD}
      - POSTGRES_DB=${EVENTS_POSTGRES_DB}
    volumes:
      - events_db:/var/lib/postgresql/data
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"
    networks:
      - events

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:management
    restart: always
    hostname: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    networks:
      - musical-spoon
    ports:
      - "15672:15672"

volumes:
  auth_db:
  events_db:
  rabbitmq:

networks:
  musical-spoon:
    name: musical-spoon
    driver: bridge
  auth:
    name: auth
    driver: bridge
  events:
    name: events
    driver: bridge
